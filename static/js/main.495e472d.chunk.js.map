{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","rates","triggerOnChange","_","setState","isReady","refreshRates","this","options","getAvailableCurrencies","map","c","name","code","value","className","href","search","autocomplete","placeholder","onChange","selectedCurrency","currency1","e","sourceAmountValue","target","valueAsNumber","type","currency2","ref","resultInput","isNaN","result","transform","fractionDigits","getCurrencyInfo","afterDecimalPoint","Number","toFixed","readOnly","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAyGeA,E,4MAnGXC,MAAQ,G,kEAEa,IAAD,OAChBC,IAAMC,iBAAgB,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACC,QAASJ,IAAMI,eACzDJ,IAAMK,iB,+BAGA,IAAD,OACL,IAAKC,KAAKP,MAAMK,QACZ,OAAO,KAEX,IACMG,EADaP,IAAMQ,yBACEC,KAAI,SAAAC,GAAC,MAAK,CACjCC,KAAMD,EAAEE,MAASF,EAAEE,OAASF,EAAEC,KAAQ,GAAtB,aAAiCD,EAAEC,OACnDE,MAAOH,EAAEE,SAEb,OACI,yBAAKE,UAAU,OACX,4BAAQA,UAAU,cACd,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,gBAEJ,yBAAKD,UAAW,gBACZ,yCACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CACIP,QAASA,EACTS,QAAM,EACNC,aAAa,KACbN,KAAK,cACLO,YAAY,kBACZC,SAAU,SAAAC,GAAgB,OAAI,EAAKjB,SAAS,CACxCkB,UAAWD,OAGnB,2BACIN,UAAW,cACXK,SAAU,SAAAG,GAAC,OAAI,EAAKnB,SAAS,CACzBoB,kBAAmBD,EAAEE,OAAOC,iBAEhCC,KAAK,SACLf,KAAK,eAEb,0BAAMG,UAAW,eAAjB,KACA,yBAAKA,UAAU,cACX,kBAAC,IAAD,CACIP,QAASA,EACTS,QAAM,EACNC,aAAa,KACbN,KAAK,cACLO,YAAY,kBACZC,SAAU,SAAAC,GAAgB,OAAI,EAAKjB,SAAS,CACxCwB,UAAWP,OAGnB,2BACIN,UAAW,cACXc,IAAK,SAAAC,GACD,GAAKA,EAGL,GAAK,EAAK9B,MAAMsB,WACR,EAAKtB,MAAM4B,WACX,EAAK5B,MAAMwB,oBACZO,MAAM,EAAK/B,MAAMwB,mBAHxB,CAQA,IAAMQ,EAAS/B,IAAMgC,UACjB,EAAKjC,MAAMwB,kBAAmB,EAAKxB,MAAMsB,UAAW,EAAKtB,MAAM4B,WAE7DM,GACFjC,IAAMkC,gBAAgB,EAAKnC,MAAM4B,YAAc,CAACQ,kBAAmB,IACrEA,kBACFN,EAAYhB,MAAQuB,OAAOL,GAAQM,QAAQJ,QATvCJ,EAAYhB,MAAQ,IAW5Ba,KAAK,OACLf,KAAK,YACL2B,UAAU,MAIjBhC,KAAKP,MAAMsB,WAAaf,KAAKP,MAAM4B,WAChC,yBAAKb,UAAW,YAAhB,OAEAsB,OAAOpC,IAAMgC,UAAU,EAAK1B,KAAKP,MAAMsB,UAAWf,KAAKP,MAAM4B,YACxDU,SACGrC,IAAMkC,gBAAgB5B,KAAKP,MAAM4B,YAAc,CAACQ,kBAAmB,IACrEA,0B,GA1FhBI,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.495e472d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport rates from \"cross-rates-browser\";\nimport SelectSearch from \"react-select-search\";\n\nclass App extends React.Component {\n    state = {};\n\n    componentDidMount() {\n        rates.triggerOnChange(_ => this.setState({isReady: rates.isReady()}));\n        rates.refreshRates();\n    }\n\n    render() {\n        if (!this.state.isReady) {\n            return null\n        }\n        const currencies = rates.getAvailableCurrencies();\n        const options = currencies.map(c => ({\n            name: c.code + ((c.code === c.name) ? \"\" : ` - ${c.name}`),\n            value: c.code,\n        }));\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <a className=\"App-link\" href=\"/\">cross-rates</a>\n                </header>\n                <div className={\"content-body\"}>\n                    <p>Transform:</p>\n                    <div className=\"options\">\n                        <div className=\"left-side\">\n                            <SelectSearch\n                                options={options}\n                                search\n                                autocomplete=\"on\"\n                                name=\"currencies1\"\n                                placeholder=\"Select currency\"\n                                onChange={selectedCurrency => this.setState({\n                                    currency1: selectedCurrency\n                                })}\n                            />\n                            <input\n                                className={\"value-input\"}\n                                onChange={e => this.setState({\n                                    sourceAmountValue: e.target.valueAsNumber\n                                })}\n                                type=\"number\"\n                                name=\"currency1\"/>\n                        </div>\n                        <span className={\"equals-sign\"}>=</span>\n                        <div className=\"right-side\">\n                            <SelectSearch\n                                options={options}\n                                search\n                                autocomplete=\"on\"\n                                name=\"currencies2\"\n                                placeholder=\"Select currency\"\n                                onChange={selectedCurrency => this.setState({\n                                    currency2: selectedCurrency\n                                })}\n                            />\n                            <input\n                                className={\"value-input\"}\n                                ref={resultInput => {\n                                    if (!resultInput) {\n                                        return\n                                    }\n                                    if (!this.state.currency1\n                                        || !this.state.currency2\n                                        || !this.state.sourceAmountValue\n                                        || isNaN(this.state.sourceAmountValue)\n                                    ) {\n                                        resultInput.value = \"\";\n                                        return\n                                    }\n                                    const result = rates.transform(\n                                        this.state.sourceAmountValue, this.state.currency1, this.state.currency2\n                                    );\n                                    const fractionDigits = (\n                                        rates.getCurrencyInfo(this.state.currency2) || {afterDecimalPoint: 2}\n                                    ).afterDecimalPoint;\n                                    resultInput.value = Number(result).toFixed(fractionDigits);\n                                }}\n                                type=\"text\"\n                                name=\"currency2\"\n                                readOnly={true}/>\n                        </div>\n                    </div>\n                    {\n                        (this.state.currency1 && this.state.currency2)\n                        && (<div className={\"rate-row\"}>\n                            1 : {\n                            Number(rates.transform(1.0, this.state.currency1, this.state.currency2))\n                                .toFixed((\n                                    rates.getCurrencyInfo(this.state.currency2) || {afterDecimalPoint: 2}\n                                ).afterDecimalPoint)\n                        }\n                        </div>)\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}